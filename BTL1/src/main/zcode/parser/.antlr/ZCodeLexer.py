# Generated from d:/Pony/btl-nlnnlt232/BTL1/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
# Student ID: 2011357


def serializedATN():
    return [
        4,0,51,398,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
        1,40,1,40,1,41,1,41,1,42,1,42,5,42,279,8,42,10,42,12,42,282,9,42,
        1,43,1,43,1,43,1,43,5,43,288,8,43,10,43,12,43,291,9,43,1,43,3,43,
        294,8,43,1,43,1,43,1,44,1,44,3,44,300,8,44,1,44,3,44,303,8,44,1,
        45,4,45,306,8,45,11,45,12,45,307,1,46,1,46,5,46,312,8,46,10,46,12,
        46,315,9,46,1,47,1,47,3,47,319,8,47,1,47,4,47,322,8,47,11,47,12,
        47,323,1,48,1,48,3,48,328,8,48,1,49,1,49,5,49,332,8,49,10,49,12,
        49,335,9,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,354,8,50,1,51,1,51,1,51,1,
        51,3,51,360,8,51,1,52,4,52,363,8,52,11,52,12,52,364,1,52,1,52,1,
        53,1,53,1,53,1,53,5,53,373,8,53,10,53,12,53,376,9,53,1,53,1,53,1,
        53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,5,54,389,8,54,10,54,12,
        54,392,9,54,1,54,1,54,1,55,1,55,1,55,1,289,0,56,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,0,95,0,97,46,99,
        47,101,0,103,0,105,48,107,49,109,50,111,51,1,0,10,3,0,65,90,95,95,
        97,122,1,1,10,10,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,
        8,10,12,13,34,34,92,92,3,0,9,10,13,13,32,32,7,0,39,39,92,92,98,98,
        102,102,110,110,114,114,116,116,4,0,10,10,13,13,34,34,92,92,4,0,
        9,10,13,13,34,34,92,92,416,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,1,113,1,0,0,0,3,118,1,0,0,0,
        5,124,1,0,0,0,7,131,1,0,0,0,9,136,1,0,0,0,11,143,1,0,0,0,13,150,
        1,0,0,0,15,154,1,0,0,0,17,162,1,0,0,0,19,167,1,0,0,0,21,171,1,0,
        0,0,23,177,1,0,0,0,25,180,1,0,0,0,27,186,1,0,0,0,29,195,1,0,0,0,
        31,198,1,0,0,0,33,203,1,0,0,0,35,208,1,0,0,0,37,214,1,0,0,0,39,218,
        1,0,0,0,41,222,1,0,0,0,43,226,1,0,0,0,45,229,1,0,0,0,47,231,1,0,
        0,0,49,233,1,0,0,0,51,235,1,0,0,0,53,237,1,0,0,0,55,239,1,0,0,0,
        57,241,1,0,0,0,59,244,1,0,0,0,61,247,1,0,0,0,63,249,1,0,0,0,65,252,
        1,0,0,0,67,254,1,0,0,0,69,257,1,0,0,0,71,261,1,0,0,0,73,264,1,0,
        0,0,75,266,1,0,0,0,77,268,1,0,0,0,79,270,1,0,0,0,81,272,1,0,0,0,
        83,274,1,0,0,0,85,276,1,0,0,0,87,283,1,0,0,0,89,297,1,0,0,0,91,305,
        1,0,0,0,93,309,1,0,0,0,95,316,1,0,0,0,97,327,1,0,0,0,99,329,1,0,
        0,0,101,353,1,0,0,0,103,359,1,0,0,0,105,362,1,0,0,0,107,368,1,0,
        0,0,109,382,1,0,0,0,111,395,1,0,0,0,113,114,5,116,0,0,114,115,5,
        114,0,0,115,116,5,117,0,0,116,117,5,101,0,0,117,2,1,0,0,0,118,119,
        5,102,0,0,119,120,5,97,0,0,120,121,5,108,0,0,121,122,5,115,0,0,122,
        123,5,101,0,0,123,4,1,0,0,0,124,125,5,110,0,0,125,126,5,117,0,0,
        126,127,5,109,0,0,127,128,5,98,0,0,128,129,5,101,0,0,129,130,5,114,
        0,0,130,6,1,0,0,0,131,132,5,98,0,0,132,133,5,111,0,0,133,134,5,111,
        0,0,134,135,5,108,0,0,135,8,1,0,0,0,136,137,5,115,0,0,137,138,5,
        116,0,0,138,139,5,114,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,
        142,5,103,0,0,142,10,1,0,0,0,143,144,5,114,0,0,144,145,5,101,0,0,
        145,146,5,116,0,0,146,147,5,117,0,0,147,148,5,114,0,0,148,149,5,
        110,0,0,149,12,1,0,0,0,150,151,5,118,0,0,151,152,5,97,0,0,152,153,
        5,114,0,0,153,14,1,0,0,0,154,155,5,100,0,0,155,156,5,121,0,0,156,
        157,5,110,0,0,157,158,5,97,0,0,158,159,5,109,0,0,159,160,5,105,0,
        0,160,161,5,99,0,0,161,16,1,0,0,0,162,163,5,102,0,0,163,164,5,117,
        0,0,164,165,5,110,0,0,165,166,5,99,0,0,166,18,1,0,0,0,167,168,5,
        102,0,0,168,169,5,111,0,0,169,170,5,114,0,0,170,20,1,0,0,0,171,172,
        5,117,0,0,172,173,5,110,0,0,173,174,5,116,0,0,174,175,5,105,0,0,
        175,176,5,108,0,0,176,22,1,0,0,0,177,178,5,98,0,0,178,179,5,121,
        0,0,179,24,1,0,0,0,180,181,5,98,0,0,181,182,5,114,0,0,182,183,5,
        101,0,0,183,184,5,97,0,0,184,185,5,107,0,0,185,26,1,0,0,0,186,187,
        5,99,0,0,187,188,5,111,0,0,188,189,5,110,0,0,189,190,5,116,0,0,190,
        191,5,105,0,0,191,192,5,110,0,0,192,193,5,117,0,0,193,194,5,101,
        0,0,194,28,1,0,0,0,195,196,5,105,0,0,196,197,5,102,0,0,197,30,1,
        0,0,0,198,199,5,101,0,0,199,200,5,108,0,0,200,201,5,115,0,0,201,
        202,5,101,0,0,202,32,1,0,0,0,203,204,5,101,0,0,204,205,5,108,0,0,
        205,206,5,105,0,0,206,207,5,102,0,0,207,34,1,0,0,0,208,209,5,98,
        0,0,209,210,5,101,0,0,210,211,5,103,0,0,211,212,5,105,0,0,212,213,
        5,110,0,0,213,36,1,0,0,0,214,215,5,101,0,0,215,216,5,110,0,0,216,
        217,5,100,0,0,217,38,1,0,0,0,218,219,5,110,0,0,219,220,5,111,0,0,
        220,221,5,116,0,0,221,40,1,0,0,0,222,223,5,97,0,0,223,224,5,110,
        0,0,224,225,5,100,0,0,225,42,1,0,0,0,226,227,5,111,0,0,227,228,5,
        114,0,0,228,44,1,0,0,0,229,230,5,43,0,0,230,46,1,0,0,0,231,232,5,
        45,0,0,232,48,1,0,0,0,233,234,5,42,0,0,234,50,1,0,0,0,235,236,5,
        47,0,0,236,52,1,0,0,0,237,238,5,37,0,0,238,54,1,0,0,0,239,240,5,
        61,0,0,240,56,1,0,0,0,241,242,5,60,0,0,242,243,5,45,0,0,243,58,1,
        0,0,0,244,245,5,33,0,0,245,246,5,61,0,0,246,60,1,0,0,0,247,248,5,
        60,0,0,248,62,1,0,0,0,249,250,5,60,0,0,250,251,5,61,0,0,251,64,1,
        0,0,0,252,253,5,62,0,0,253,66,1,0,0,0,254,255,5,62,0,0,255,256,5,
        61,0,0,256,68,1,0,0,0,257,258,5,46,0,0,258,259,5,46,0,0,259,260,
        5,46,0,0,260,70,1,0,0,0,261,262,5,61,0,0,262,263,5,61,0,0,263,72,
        1,0,0,0,264,265,5,40,0,0,265,74,1,0,0,0,266,267,5,41,0,0,267,76,
        1,0,0,0,268,269,5,91,0,0,269,78,1,0,0,0,270,271,5,93,0,0,271,80,
        1,0,0,0,272,273,5,44,0,0,273,82,1,0,0,0,274,275,5,10,0,0,275,84,
        1,0,0,0,276,280,7,0,0,0,277,279,7,0,0,0,278,277,1,0,0,0,279,282,
        1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,86,1,0,0,0,282,280,1,
        0,0,0,283,284,5,35,0,0,284,285,5,35,0,0,285,289,1,0,0,0,286,288,
        9,0,0,0,287,286,1,0,0,0,288,291,1,0,0,0,289,290,1,0,0,0,289,287,
        1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,292,294,7,1,0,0,293,292,
        1,0,0,0,294,295,1,0,0,0,295,296,6,43,0,0,296,88,1,0,0,0,297,299,
        3,91,45,0,298,300,3,93,46,0,299,298,1,0,0,0,299,300,1,0,0,0,300,
        302,1,0,0,0,301,303,3,95,47,0,302,301,1,0,0,0,302,303,1,0,0,0,303,
        90,1,0,0,0,304,306,7,2,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,
        1,0,0,0,307,308,1,0,0,0,308,92,1,0,0,0,309,313,5,46,0,0,310,312,
        7,2,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,
        1,0,0,0,314,94,1,0,0,0,315,313,1,0,0,0,316,318,7,3,0,0,317,319,7,
        4,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,322,7,
        2,0,0,321,320,1,0,0,0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,
        0,0,0,324,96,1,0,0,0,325,328,3,1,0,0,326,328,3,3,1,0,327,325,1,0,
        0,0,327,326,1,0,0,0,328,98,1,0,0,0,329,333,5,34,0,0,330,332,3,103,
        51,0,331,330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,
        0,0,334,336,1,0,0,0,335,333,1,0,0,0,336,337,5,34,0,0,337,338,6,49,
        1,0,338,100,1,0,0,0,339,340,5,92,0,0,340,354,5,98,0,0,341,342,5,
        92,0,0,342,354,5,102,0,0,343,344,5,92,0,0,344,354,5,114,0,0,345,
        346,5,92,0,0,346,354,5,110,0,0,347,348,5,92,0,0,348,354,5,116,0,
        0,349,350,5,92,0,0,350,354,5,34,0,0,351,352,5,92,0,0,352,354,5,92,
        0,0,353,339,1,0,0,0,353,341,1,0,0,0,353,343,1,0,0,0,353,345,1,0,
        0,0,353,347,1,0,0,0,353,349,1,0,0,0,353,351,1,0,0,0,354,102,1,0,
        0,0,355,360,8,5,0,0,356,360,3,101,50,0,357,358,5,39,0,0,358,360,
        5,34,0,0,359,355,1,0,0,0,359,356,1,0,0,0,359,357,1,0,0,0,360,104,
        1,0,0,0,361,363,7,6,0,0,362,361,1,0,0,0,363,364,1,0,0,0,364,362,
        1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,367,6,52,0,0,367,106,
        1,0,0,0,368,374,5,34,0,0,369,370,5,92,0,0,370,373,7,7,0,0,371,373,
        8,8,0,0,372,369,1,0,0,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,
        1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,0,0,377,378,
        5,92,0,0,378,379,8,7,0,0,379,380,1,0,0,0,380,381,6,53,2,0,381,108,
        1,0,0,0,382,390,5,34,0,0,383,384,5,39,0,0,384,389,5,34,0,0,385,386,
        5,92,0,0,386,389,7,7,0,0,387,389,8,9,0,0,388,383,1,0,0,0,388,385,
        1,0,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,
        1,0,0,0,391,393,1,0,0,0,392,390,1,0,0,0,393,394,6,54,3,0,394,110,
        1,0,0,0,395,396,9,0,0,0,396,397,6,55,4,0,397,112,1,0,0,0,19,0,280,
        289,293,299,302,307,313,318,323,327,333,353,359,364,372,374,388,
        390,5,6,0,0,1,49,0,1,53,1,1,54,2,1,55,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    PLUS = 23
    MINUS = 24
    MULTIPLY = 25
    DIVIDE = 26
    MOD = 27
    EQUAL = 28
    ASSIGN = 29
    DIFF = 30
    LT = 31
    LE = 32
    GT = 33
    GE = 34
    CONCAT = 35
    CMPRSTR = 36
    LRB = 37
    RRB = 38
    LSB = 39
    RSB = 40
    CM = 41
    NEWLINE = 42
    IDENTIFIER = 43
    LINECMT = 44
    NUMLIT = 45
    BOOLLIT = 46
    STRINGLIT = 47
    WS = 48
    ILLEGAL_ESCAPE = 49
    UNCLOSE_STRING = 50
    ERROR_CHAR = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'<-'", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'...'", "'=='", "'('", "')'", "'['", "']'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "PLUS", 
            "MINUS", "MULTIPLY", "DIVIDE", "MOD", "EQUAL", "ASSIGN", "DIFF", 
            "LT", "LE", "GT", "GE", "CONCAT", "CMPRSTR", "LRB", "RRB", "LSB", 
            "RSB", "CM", "NEWLINE", "IDENTIFIER", "LINECMT", "NUMLIT", "BOOLLIT", 
            "STRINGLIT", "WS", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", "ERROR_CHAR" ]

    ruleNames = [ "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", 
                  "AND", "OR", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", 
                  "EQUAL", "ASSIGN", "DIFF", "LT", "LE", "GT", "GE", "CONCAT", 
                  "CMPRSTR", "LRB", "RRB", "LSB", "RSB", "CM", "NEWLINE", 
                  "IDENTIFIER", "LINECMT", "NUMLIT", "INTEGER", "DECIMAL", 
                  "EXPONENT", "BOOLLIT", "STRINGLIT", "ESCAPESEQ", "CHARSEQ", 
                  "WS", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[49] = self.STRINGLIT_action 
            actions[53] = self.ILLEGAL_ESCAPE_action 
            actions[54] = self.UNCLOSE_STRING_action 
            actions[55] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text[1:]; raise IllegalEscape(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.text = self.text[1:]; raise UncloseString(self.text)
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


